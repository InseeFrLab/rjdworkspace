# Workflow derived from https://github.com/r-lib/actions/tree/master/examples
# Need help debugging build failures? Start at https://github.com/r-lib/actions#where-to-find-help
on:
  workflow_dispatch

name: R-CMD-check

jobs:
  R-CMD-check:
    runs-on: ${{ matrix.os }}

    name: ${{ matrix.os }} (${{ matrix.r }}) java ${{ matrix.java }}

    strategy:
      fail-fast: false
      matrix:
        # os: [ 'ubuntu-latest', 'windows-latest', 'macOS-latest' ]
        # r: [ 'devel', 'release', 'oldrel-1', '4.2.1', '4.1.1', '4.1.3', '4.0.5', '3.6.1' ]
        # java: [ '11', '13', '17', '19', '21' ]
        os: [ 'windows-latest' ]
        r: [ 'devel', 'release' ]
        # Pb with Java 8
        java: [ '11' ]
        include:
          - http-user-agent: 'release'
            r: 'devel'

    env:
      GITHUB_PAT: ${{ secrets.GITHUB_TOKEN }}
      R_KEEP_PKG_SOURCE: yes

    steps:
      - uses: actions/checkout@v4

      - uses: r-lib/actions/setup-pandoc@v2

      # Set-up java

      - name: Setup java (x64)
        uses: actions/setup-java@v4
        with:
          java-version: ${{ matrix.java }}
          java-package: jdk
          distribution: 'zulu'
          architecture: x64

      - name: Setup java (x86)
        uses: actions/setup-java@v4
        with:
          java-version: ${{ matrix.java }}
          java-package: jdk
          distribution: 'zulu'
          architecture: x86


#
#       - name: Setup java (x64)
#         uses: actions/setup-java@v4
#         if: matrix.java != '19'
#         with:
#           java-version: ${{ matrix.java }}
#           java-package: jdk
#           distribution: 'zulu'
#           architecture: x64
#
#       - name: Setup java 19 (x64)
#         uses: actions/setup-java@v4
#         if: matrix.java == '19'
#         with:
#           java-version: ${{ matrix.java }}
#           java-package: jdk
#           distribution: 'temurin'
#           architecture: x64
#
#       - name: Setup java (x86)
#         uses: actions/setup-java@v4
#         if: runner.os == 'Windows' && matrix.java != '19'
#         with:
#           java-version: ${{ matrix.java }}
#           java-package: jdk
#           distribution: 'zulu'
#           architecture: x86
#
#       - name: Setup java 19 (x86)
#         uses: actions/setup-java@v4
#         if: runner.os == 'Windows' && matrix.java == '19'
#         with:
#           java-version: ${{ matrix.java }}
#           java-package: jdk
#           distribution: 'temurin'
#           architecture: x86

      # Some additionnal set up for ubuntu
      # - name: Installation de libcurl4-openssl-dev
      #   if: runner.os == 'Linux'
      #   run: |
      #     sudo apt-get update
      #     sudo apt-get install -y libcurl4-openssl-dev
      #     sudo apt-get install -y default-jre
      #     sudo find / -name libjvm.so
      #
      # - name: Définir LD_LIBRARY_PATH
      #   if: runner.os == 'Linux'
      #   run: |
      #     sudo bash -c 'export LD_LIBRARY_PATH=/usr/lib/jvm/temurin-11-jdk-amd64/lib/server:$LD_LIBRARY_PATH'
      #     sudo bash -c "echo 'export LD_LIBRARY_PATH=/usr/lib/jvm/temurin-11-jdk-amd64/lib/server:$LD_LIBRARY_PATH' >> $HOME/.profile"
      #
      # - name: Afficher le chemin de bibliothèque Java
      #   if: runner.os == 'Linux'
      #   run: echo $LD_LIBRARY_PATH
      #
      # - name: Vérifier la version de Java
      #   if: runner.os == 'Linux'
      #   run: java -version
      #
      # - name: Vérifier la valeur de JAVA_HOME
      #   if: runner.os == 'Linux'
      #   run: echo $JAVA_HOME

      # Set up R
      - uses: r-lib/actions/setup-r@v2
        with:
          r-version: ${{ matrix.r }}
          http-user-agent: ${{ matrix.http-user-agent }}
          use-public-rspm: true

      # Pour MacOS et ubuntu, qqs installation supplémentaires
      - name: "[Stage] [macOS] Install libgit2"
        if: runner.os == 'macOS'
        run: brew install libgit2

      - name: "[Stage] [macOS] Install system libs for pkgdown"
        if: runner.os == 'macOS'
        run: brew install harfbuzz fribidi

      - name: "Configure java pour ubuntu et macos"
        if: runner.os != 'Windows'
        run: sudo R CMD javareconf

      - name: "[macOS] Install textshaping"
        run: install.packages('textshaping')
        shell: Rscript {0}
        if: ${{ runner.os == 'macOS' && matrix.r == 'devel' }}

      - name: "[macOS] Install systemfonts"
        run: install.packages('systemfonts')
        shell: Rscript {0}
        if: ${{ runner.os == 'macOS' && matrix.r == '3.6.1' }}

      # Dépendances

      - uses: r-lib/actions/setup-r-dependencies@v2
        if: ${{ matrix.r != '3.6.1' }}
        with:
          packages: knitr, kableExtra, rmarkdown
          extra-packages: any::rcmdcheck

      # Pour R 3.6.1 qqs installations supplémentaires
      - name: "[R 3.6.1] Install dependency"
        run: install.packages(c("rJava", "XML", "RJDemetra", "rcmdcheck"))
        shell: Rscript {0}
        if: ${{ matrix.r == '3.6.1' || matrix.java == '11' }}

      - uses: r-lib/actions/setup-tinytex@v2

      - uses: r-lib/actions/check-r-package@v2
